pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'sreenath92/devops-learning-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        APP_NAME = 'devops-learning-app-sreenath92'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Checking out source code...'
                git branch: 'main', 
                    url: 'https://github.com/Sreenath92/devops_learning_sree.git'
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Building Docker image...'
                dir('docker-projects/web-application') {
                    script {
                        dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        docker.build("${DOCKER_IMAGE}:latest")
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                dir('docker-projects/web-application') {
                    sh '''
                        # Install dependencies and run tests
                        npm install
                        npm test
                        
                        # Docker image tests
                        docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} npm test
                    '''
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Running security scans...'
                script {
                    // Scan Docker image for vulnerabilities
                    sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo 'üöÄ Deploying to staging environment...'
                script {
                    sh """
                        # Stop existing container
                        docker stop ${APP_NAME}-staging || true
                        docker rm ${APP_NAME}-staging || true
                        
                        # Deploy new version
                        docker run -d \\
                            --name ${APP_NAME}-staging \\
                            -p 3001:3000 \\
                            -e NODE_ENV=staging \\
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üîç Performing health check...'
                script {
                    // Wait for application to start
                    sh 'sleep 30'
                    
                    // Health check
                    def healthCheck = sh(
                        script: 'curl -f http://localhost:3001/api/health',
                        returnStatus: true
                    )
                    
                    if (healthCheck != 0) {
                        error('Health check failed!')
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üåê Deploying to production...'
                script {
                    sh './automation-scripts/deployment/deploy.sh production ${DOCKER_TAG}'
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
            // Send success notification
        }
        failure {
            echo '‚ùå Pipeline failed!'
            // Send failure notification
        }
        always {
            echo 'üßπ Cleaning up...'
            // Clean up temporary resources
            sh '''
                docker system prune -f
                docker image prune -f
            '''
        }
    }
}
