pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'sreenath92/devops-learning-app'
        APP_NAME = 'devops-learning-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Code checked out successfully'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir('docker-projects/web-application') {
                        sh 'docker build -f Dockerfile.minimal -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .'
                        sh 'docker build -f Dockerfile.minimal -t ${DOCKER_IMAGE}:latest .'
                    }
                }
            }
        }
        
        stage('Test Application') {
            steps {
                script {
                    sh 'docker run --rm ${DOCKER_IMAGE}:${BUILD_NUMBER} npm test'
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                script {
                    sh 'docker stop ${APP_NAME} || true'
                    sh 'docker rm ${APP_NAME} || true'
                    
                    sh '''
                        docker run -d \
                            --name ${APP_NAME} \
                            -p 3001:3000 \
                            --restart unless-stopped \
                            ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    '''
                    
                    sh 'sleep 15'
                    sh 'docker ps | grep ${APP_NAME}'
                    sh 'docker logs ${APP_NAME}'
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    sh 'curl -f http://localhost:3001/api/health'
                    sh 'curl -s http://localhost:3001/api/info'
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully! Application deployed on port 3001'
        }
        failure {
            echo 'Pipeline failed.'
            sh 'docker logs ${APP_NAME} || true'
        }
    }
}
